version: '3.8'

services:
  obu-ocr-app:
    # 1. 使用预先构建好的镜像，而不是在运行时构建或挂载代码
    image: obu-ocr-service:v1.0
    container_name: obu-ocr-container-prod
    restart: always
    ports:
      - "5000:5000"

    # 2. 【核心性能配置】将容器绑定到指定的CPU核心
    #    - cpuset: '0-3' 表示容器将只能使用CPU核心0, 1, 2, 3。
    #    - 这可以避免CPU资源争抢和不必要的上下文切换，提供稳定性能。
    #    - 注意：请根据您服务器的实际CPU核心数量和规划来修改此值。
    #      您可以通过 `lscpu` 命令查看服务器的CPU信息。
    # cpuset: '0-3'

    # 3. 【核心性能配置】内存限制
    #    - memory: '4g' 是一个硬性限制，容器使用的内存不能超过4GB。
    #    - memory_reservation: '2g' 是一个软性保证，Docker会确保容器至少有2GB可用内存。
    #    - 这可以防止内存泄漏耗尽服务器资源，并保证服务有足够的启动内存。
    # mem_limit: 4g
    # mem_reservation: 2g

    # 4. 【安全配置】通过环境变量注入敏感信息
    #    - 不再将密码硬编码在代码中。
    #    - 推荐使用 .env 文件来管理这些值，避免直接写入compose文件。
    environment:
      # 这种语法告诉Docker Compose:
      # 如果能找到 DB_USERNAME 环境变量 (来自 .env 或 shell), 就用它。
      # 如果找不到, 就使用冒号后面的默认值 "VFJ_CQGS"。
      - DB_USERNAME=${DB_USERNAME:-VFJ_CQGS}
      - DB_PASSWORD=${DB_PASSWORD:-vfj_20231007}
      - DB_DSN=${DB_DSN:-192.168.1.200:1521/ORCL}
      - REFRESH_API_KEY=${REFRESH_API_KEY:-Vfj@1234.wq}

      # - OMP_NUM_THREADS=1
      # - ORT_THREAD_POOL_SIZE=1

# 5. 【数据持久化与灵活配置】
    #    - 挂载运行时数据目录，并直接映射配置文件。
    volumes:
      # 配置文件映射
      - ./config.py:/app/config.py

      # --- 热修复映射 ---
      # - ./yolo_handler.py:/app/yolo_handler.py
      # - ./ocr_handler.py:/app/ocr_handler.py
      # - ./app.py:/app/app.py

      # --- 明确映射模型目录，确保文件存在 ---
      - ./model:/app/model:ro

      # 数据持久化目录
      - ./uploads:/app/uploads
      - ./process_photo:/app/process_photo
      - ./log:/app/log