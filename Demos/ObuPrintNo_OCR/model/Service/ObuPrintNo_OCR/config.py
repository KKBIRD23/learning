# config.py

import os

# --- 基础路径配置 ---
BASE_PROJECT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")) # 假设app.py在Service目录下

# --- 模型路径 ---
ONNX_MODEL_PATH = os.path.join(BASE_PROJECT_DIR, "model", "model", "BarCode_Detect", "BarCode_Detect_dynamic.onnx")
OCR_REC_MODEL_DIR = os.path.join(BASE_PROJECT_DIR, "model", "model", "PaddleOCR", "PP-OCRv5_server_rec_infer")

# --- Flask 应用配置 ---
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}
MAX_CONTENT_LENGTH = 16 * 1024 * 1024 # 16MB

# --- 日志配置 ---
LOG_DIR = "log"
LOG_FILE = "app.log"
LOG_FILE_MAX_BYTES = 10 * 1024 * 1024 # 10MB
LOG_FILE_BACKUP_COUNT = 5

# --- YOLOv8 配置 ---
YOLO_CONFIDENCE_THRESHOLD = 0.25
YOLO_IOU_THRESHOLD = 0.45
YOLO_MIN_DETECTION_AREA_PX = 2000  # 最小检测面积（像素）
YOLO_MAX_DETECTION_AREA_FACTOR = 0.1 # 最大检测面积占图像总面积的比例 (0.0 to 1.0)
YOLO_COCO_CLASSES = ['Barcode'] # 假设模型只检测一个类别

# --- OCR 配置 ---
OCR_TARGET_INPUT_HEIGHT = 48
OCR_DIGIT_ROI_Y_OFFSET_FACTOR = -0.15 # 数字区域相对于YOLO框顶部的Y偏移因子
OCR_DIGIT_ROI_HEIGHT_FACTOR = 0.7     # 数字区域高度相对于YOLO框高度的因子
OCR_DIGIT_ROI_WIDTH_EXPAND_FACTOR = 1.05 # 数字区域宽度扩展因子
OCR_NUM_WORKERS = 4 # 并行OCR工作进程数 (0或1表示串行)

# --- 布局与状态管理配置 ---
LAYOUT_EXPECTED_TOTAL_ROWS = 13
LAYOUT_REGULAR_ROWS_COUNT = 12 # 逻辑上的常规行数 (不含特殊行)
LAYOUT_REGULAR_COLS_COUNT = 4
LAYOUT_SPECIAL_ROW_COLS_COUNT = 2
LAYOUT_TOTAL_OBUS_EXPECTED = 50 # 用于判断会话是否完成

# 首次布局学习相关阈值 (来自 learn_initial_layout_from_yolo_v81 或类似函数的常量)
LAYOUT_MIN_CORE_ANCHORS_FOR_LEARNING = 5
LAYOUT_MIN_VALID_ROWS_FOR_LEARNING = 1
LAYOUT_MIN_ANCHORS_PER_RELIABLE_ROW = 2
LAYOUT_ROW_GROUP_Y_THRESHOLD_FACTOR = 0.4 # 用于YOLO锚点物理行分组的阈值因子

# 参照物定位与映射相关阈值
LAYOUT_Y_MATCH_THRESHOLD_FACTOR = 0.75 # Y坐标匹配阈值 = avg_row_height * factor
LAYOUT_X_MATCH_THRESHOLD_FACTOR = 0.75 # X坐标匹配阈值 = avg_obu_width * factor

# --- 过程图片保存 ---
SAVE_PROCESS_PHOTOS = True
PROCESS_PHOTO_DIR = "process_photo"
PROCESS_PHOTO_JPG_QUALITY = 85

# --- 有效OBU码列表 (模拟数据库) ---
VALID_OBU_CODES = {
    "5001240700323449", "5001240700323450", "5001240700323445", "5001240700323446",
    "5001240700323447", "5001240700323448", "5001240700323441", "5001240700323442",
    "5001240700323443", "5001240700323444", "5001240700323437", "5001240700323438",
    "5001240700323439", "5001240700323440", "5001240700323433", "5001240700323434",
    "5001240700323435", "5001240700323436", "5001240700323430", "5001240700323431",
    "5001240700323432", "5001240700323429", "5001240700323428", "5001240700323427",
    "5001240700323426", "5001240700323425", "5001240700323424", "5001240700323423",
    "5001240700323422", "5001240700323421", "5001240700323420", "5001240700323419",
    "5001240700323418", "5001240700323417", "5001240700323416", "5001240700323415",
    "5001240700323414", "5001240700323413", "5001240700323412", "5001240700323411",
    "5001240700323410", "5001240700323409", "5001240700323408", "5001240700323407",
    "5001240700323406", "5001240700323405", "5001240700323404", "5001240700323403",
    "5001240700323402", "5001240700323401"
}

# --- 版本号 ---
APP_VERSION = "v6.0.0_modular_refactor"